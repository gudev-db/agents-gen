import streamlit as st
from processing.context_builder import construir_contexto
from utils.config import get_gemini_models
from google.genai import types

def processar_video_upload(video_file, segmentos_selecionados, agente, tipo_analise="completa"):
    """Processa v√≠deo upload e retorna an√°lise"""
    try:
        modelo_vision, _ = get_gemini_models()
        video_bytes = video_file.read()
        
        contexto = construir_contexto(agente, segmentos_selecionados)
        
        if tipo_analise == "completa":
            prompt = f"""
            {contexto}
            
            Analise este v√≠deo considerando as diretrizes fornecidas e forne√ßa um relat√≥rio detalhado:
            
            ## üé¨ AN√ÅLISE DO V√çDEO
            
            ### üìä Resumo Executivo
            [Forne√ßa uma vis√£o geral da conformidade do v√≠deo com as diretrizes]
            
            ### ‚úÖ Pontos de Conformidade
            - [Liste os aspectos que est√£o em conformidade]
            
            ### ‚ö†Ô∏è Pontos de Aten√ß√£o
            - [Liste os aspectos que precisam de ajustes]
            
            ### üéØ An√°lise de Conte√∫do
            - **Mensagem**: [Avalie se a mensagem est√° alinhada]
            - **Tom e Linguagem**: [Avalie o tom utilizado]
            - **Valores da Marca**: [Verifique alinhamento com valores]
            
            ### üé® An√°lise Visual
            - **Identidade Visual**: [Cores, logos, tipografia]
            - **Qualidade T√©cnica**: [Ilumina√ß√£o, enquadramento, √°udio]
            - **Consist√™ncia**: [Manuten√ß√£o da identidade ao longo do v√≠deo]
            
            ### üîä An√°lise de √Åudio
            - [Qualidade, trilha sonora, voz]
            
            ### üìã Recomenda√ß√µes Espec√≠ficas
            [Liste recomenda√ß√µes pr√°ticas para melhorias]
            
            ### üèÜ Avalia√ß√£o Final
            [Aprovado/Reprovado/Com ajustes] - [Justificativa]
            """
        elif tipo_analise == "rapida":
            prompt = f"""
            {contexto}
            
            Fa√ßa uma an√°lise r√°pida deste v√≠deo focando nos aspectos mais cr√≠ticos:
            
            ### üîç An√°lise R√°pida
            - **Conformidade Geral**: [Avalia√ß√£o geral]
            - **Principais Pontos Positivos**: [2-3 pontos]
            - **Principais Problemas**: [2-3 pontos cr√≠ticos]
            - **Recomenda√ß√£o Imediata**: [Aprovar/Reprovar/Ajustar]
            """
        else:  # an√°lise t√©cnica
            prompt = f"""
            {contexto}
            
            Fa√ßa uma an√°lise t√©cnica detalhada do v√≠deo:
            
            ### üõ†Ô∏è An√°lise T√©cnica
            - **Qualidade de V√≠deo**: [Resolu√ß√£o, estabilidade, compress√£o]
            - **Qualidade de √Åudio**: [Clareza, ru√≠do, mixagem]
            - **Edi√ß√£o e Transi√ß√µes**: [Fluidez, ritmo, cortes]
            - **Aspectos T√©cnicos Conformes**: 
            - **Problemas T√©cnicos Identificados**:
            - **Recomenda√ß√µes T√©cnicas**:
            """
        
        response = modelo_vision.generate_content(
            contents=[
                types.Part(
                    inline_data=types.Blob(
                        data=video_bytes,
                        mime_type=video_file.type
                    )
                ),
                types.Part(text=prompt)
            ]
        )
        
        return response.text
        
    except Exception as e:
        return f"Erro ao processar v√≠deo: {str(e)}"

def processar_url_youtube(youtube_url, segmentos_selecionados, agente, tipo_analise="completa"):
    """Processa URL do YouTube e retorna an√°lise"""
    try:
        modelo_vision, _ = get_gemini_models()
        contexto = construir_contexto(agente, segmentos_selecionados)
        
        if tipo_analise == "completa":
            prompt = f"""
            {contexto}
            
            Analise este v√≠deo do YouTube considerando as diretrizes fornecidas:
            
            ## üé¨ AN√ÅLISE DO V√çDEO - YOUTUBE
            
            ### üìä Resumo Executivo
            [Avalia√ß√£o geral de conformidade]
            
            ### üéØ Conte√∫do e Mensagem
            - Alinhamento com diretrizes: 
            - Clareza da mensagem:
            - Tom e abordagem:
            
            ### üé® Aspectos Visuais
            - Identidade visual:
            - Qualidade de produ√ß√£o:
            - Consist√™ncia da marca:
            
            ### üîä Aspectos de √Åudio
            - Qualidade do √°udio:
            - Trilha sonora:
            - Narra√ß√£o/di√°logo:
            
            ### üìà Estrutura e Engajamento
            - Ritmo do v√≠deo:
            - Manuten√ß√£o do interesse:
            - Chamadas para a√ß√£o:
            
            ### ‚úÖ Pontos Fortes
            - [Liste os pontos positivos]
            
            ### ‚ö†Ô∏è Pontos de Melhoria
            - [Liste sugest√µes de melhoria]
            
            ### üèÜ Recomenda√ß√£o Final
            [Status e justificativa]
            """
        
        response = modelo_vision.generate_content(
            contents=[
                types.Part(
                    file_data=types.FileData(file_uri=youtube_url)
                ),
                types.Part(text=prompt)
            ]
        )
        
        return response.text
        
    except Exception as e:
        return f"Erro ao processar URL do YouTube: {str(e)}"
